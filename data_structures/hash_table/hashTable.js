/* 
NOTES: 

Hash Tables are usually used when trying to carry out a quick look up of information
Hash Tables work with key value pairs, similar to Maps in JS
Keys are put throught a hash function and the result will be the key

The main methods of Hash Tables are to get and set.
- Set requires you to provide both a key and a value to store in the Hash Table
- Get requires you to provide only a key so that it can then retreive the value that is associated with that key

*/

// this is the hashing function that will be responsible for converting the key which will be a string to a number
function hashStringToInt(s, tableSize) {
    // choose a PRIME number for the hash
    let hash = 17;

    for (let i = 0; i < s.length; i++) {
        hash = (13 * hash * s.charCodeAt(i)) % tableSize;
    }

    return hash;
}

class HashTable {
    // this is the array that will be storing the items
    // it is better to instantiate an array with the constructor and define the length of the array
    // try to pick a PRIME number
    table = new Array(3001);
    // simple counter to keep track of how many elements are in the table
    numItems = 0;

    // method to set an item
    setItem = (key, value) => {
        this.numItems++;
        // this will take the key and put it through the hash function created above
        const index = hashStringToInt(key, this.table.length);

        // first we check if the table aleady has the index that has been generated by the hash function
        if (this.table[index]) {
            // if the index already exists, we must check if there is already an entry with the exact same key
            const existingEntry = this.table[index].find(x => x[0] === key);

            // if there already is an existing entry, then we simply want to replace the value with the new one
            if (existingEntry) {
                existingEntry[1] = value;
            }

            // if the index already exists but there is not already an existing entry, then we will push a new with the current key value pair
            // in the main array that is being stored at this index
            this.table[index].push([key, value]);
        } else {
            // this will set the newly created hash value as the key and assign the value to it
            // IMPORTANT: In order to avoid collisions, instead of just simply storing the value, we will store an array with the key and the value
            // the key and value being stored will also be an array. that way if something else is going to be stored to this index, it will just be added
            // into the main array. the result will be an array of array being stored in the index
            this.table[index] = [[key, value]];
        }

    }

    // method to get an item
    getItem = (key) => {
        // this will take the key and put it through the hash function to get the key that was stored in the table
        const index = hashStringToInt(key, this.table.length);

        // just some simple error checking in the event where the key being passed in doesn't exist
        if (!this.table[index]) {
            return null;
        }

        // this will then return the value that is assigned to the hashed key
        // since the values being stored will all be arrays with arrays inside of them,
        // each child array will be storing a key at index 0 and the value at index 1, therefore
        // we must go through the main array being stored and check each child array at index 0 to find the correct value for the given key
        return this.table[index].find(x => x[0] === key);
    }
}

const myTable = new HashTable();
myTable.setItem('firstName', 'john');
myTable.setItem('lastName', 'connor');
myTable.setItem('firstName', 'sarah');
myTable.setItem('lastName', 'hello');
console.log(myTable.getItem('firstName'));